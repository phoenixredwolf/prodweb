package com.phoenixredwolf.prodweb.theme

import com.phoenixredwolf.prodweb.theme.colorLib.Color
import com.varabyte.kobweb.compose.css.functions.LinearGradient
import com.varabyte.kobweb.compose.css.functions.linearGradient

// lightColorScheme
val primaryLight = md_theme_light_primary.toCSS()
val secondaryLight = md_theme_light_secondary.toCSS()
val tertiaryLight = md_theme_light_tertiary.toCSS()
val errorLight = md_theme_light_error.toCSS()
val backgroundLight = md_theme_light_background.toCSS()
val outlineLight = md_theme_light_outline.toCSS()
val onPrimaryLight = md_theme_light_onPrimary.toCSS()
val onSecondaryLight = md_theme_light_onSecondary.toCSS()
val onTertiaryLight = md_theme_light_onTertiary.toCSS()
val onErrorLight = md_theme_light_onError.toCSS()
val onBackgroundLight = md_theme_light_onBackground.toCSS()
val primaryContainerLight = md_theme_light_primaryContainer.toCSS()
val secondaryContainerLight = md_theme_light_secondaryContainer.toCSS()
val tertiaryContainerLight = md_theme_light_tertiaryContainer.toCSS()
val errorContainerLight = md_theme_light_errorContainer.toCSS()
val surfaceLight = md_theme_light_surface.toCSS()
val surfaceVariantLight = md_theme_light_surfaceVariant.toCSS()
val onPrimaryContainerLight = md_theme_light_onPrimaryContainer.toCSS()
val onSecondaryContainerLight = md_theme_light_onSecondaryContainer.toCSS()
val onTertiaryContainerLight = md_theme_light_onTertiaryContainer.toCSS()
val onErrorContainerLight = md_theme_light_onErrorContainer.toCSS()
val onSurfaceLight = md_theme_light_onSurface.toCSS()
val onSurfaceVariantLight = md_theme_light_onSurfaceVariant.toCSS()
val inverseOnSurfaceLight = md_theme_light_inverseOnSurface.toCSS()
val inverseSurfaceLight = md_theme_light_inverseSurface.toCSS()
val inversePrimaryLight = md_theme_light_inversePrimary.toCSS()
val shadowLight = md_theme_light_shadow.toCSS()
val surfaceTintLight = md_theme_light_surfaceTint.toCSS()
val outlineVariantLight = md_theme_light_outlineVariant.toCSS()
val scrimLight = md_theme_light_scrim.toCSS()

// Dark Color scheme
val primaryDark = md_theme_dark_primary.toCSS()
val secondaryDark = md_theme_dark_secondary.toCSS()
val tertiaryDark = md_theme_dark_tertiary.toCSS()
val errorDark = md_theme_dark_error.toCSS()
val backgroundDark = md_theme_dark_background.toCSS()
val outlineDark = md_theme_dark_outline.toCSS()
val onPrimaryDark = md_theme_dark_onPrimary.toCSS()
val onSecondaryDark = md_theme_dark_onSecondary.toCSS()
val onTertiaryDark = md_theme_dark_onTertiary.toCSS()
val onErrorDark = md_theme_dark_onError.toCSS()
val onBackgroundDark = md_theme_dark_onBackground.toCSS()
val primaryContainerDark = md_theme_dark_primaryContainer.toCSS()
val secondaryContainerDark = md_theme_dark_secondaryContainer.toCSS()
val tertiaryContainerDark = md_theme_dark_tertiaryContainer.toCSS()
val errorContainerDark = md_theme_dark_errorContainer.toCSS()
val surfaceDark = md_theme_dark_surface.toCSS()
val surfaceVariantDark = md_theme_dark_surfaceVariant.toCSS()
val onPrimaryContainerDark = md_theme_dark_onPrimaryContainer.toCSS()
val onSecondaryContainerDark = md_theme_dark_onSecondaryContainer.toCSS()
val onTertiaryContainerDark = md_theme_dark_onTertiaryContainer.toCSS()
val onErrorContainerDark = md_theme_dark_onErrorContainer.toCSS()
val onSurfaceDark = md_theme_dark_onSurface.toCSS()
val onSurfaceVariantDark = md_theme_dark_onSurfaceVariant.toCSS()
val inverseOnSurfaceDark = md_theme_dark_inverseOnSurface.toCSS()
val inverseSurfaceDark = md_theme_dark_inverseSurface.toCSS()
val inversePrimaryDark = md_theme_dark_inversePrimary.toCSS()
val shadowDark = md_theme_dark_shadow.toCSS()
val surfaceTintDark = md_theme_dark_surfaceTint.toCSS()
val outlineVariantDark = md_theme_dark_outlineVariant.toCSS()
val scrimDark = md_theme_dark_scrim.toCSS()

val primaryGradient = linearGradient(LinearGradient.Direction.ToBottomRight, primGradStart.toCSS(), primGradEnd.toCSS())
val secondaryGradient = linearGradient(LinearGradient.Direction.ToBottomRight, Color(0x00006c4c).toCSS(), Color(0xFF006c4c).toCSS())

val facebookHover = facebook_blue.toCSS()
val linkedInHover = linkedin_blue.toCSS()

